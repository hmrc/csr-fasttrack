# microservice specific routes

POST        /personal-details/:userId/:applicationId                     controllers.PersonalDetailsController.personalDetails(userId: String, applicationId: String)
GET         /personal-details/:userId/:applicationId                     controllers.PersonalDetailsController.find(userId: String, applicationId: String)

PUT         /assistance-details/:userId/:applicationId                   controllers.AssistanceDetailsController.update(userId: String, applicationId: String)
GET         /assistance-details/:userId/:applicationId                   controllers.AssistanceDetailsController.find(userId: String, applicationId: String)

PUT         /application/create                                          controllers.ApplicationController.createApplication
GET         /application/progress/:applicationId                         controllers.ApplicationController.applicationProgress(applicationId: String)
GET         /application/status/:applicationId                           controllers.ApplicationController.applicationStatus(applicationId: String)
GET         /application/status-details/:applicationId                   controllers.ApplicationController.applicationStatusDetails(applicationId: String)
GET         /application/find/user/:userId/framework/:frameworkId        controllers.ApplicationController.findApplication(userId: String, frameworkId: String)
PUT         /application/review/:applicationId                           controllers.ApplicationController.review(applicationId: String)
PUT         /application/submit/:userId/:applicationId                   controllers.SubmitApplicationController.submitApplication(userId: String, applicationId: String)
PUT         /application/withdraw/:applicationId                         controllers.ApplicationController.applicationWithdraw(applicationId: String)
GET         /application/:applicationId/assessment-centre-indicator      controllers.ApplicationController.getAssessmentCentreIndicator(applicationId: String)
PUT         /application/edit-details/:userId/:applicationId             controllers.ApplicationController.editCandidateDetails(userId: String, applicationId: String)

PUT         /adjustments/details/:applicationId/:actionTriggeredBy       controllers.AdjustmentsManagementController.confirmAdjustments(applicationId:String, actionTriggeredBy:String)
GET         /adjustments/details/:applicationId                          controllers.AdjustmentsManagementController.findAdjustments(applicationId: String)
PUT         /adjustments/comment/:applicationId                          controllers.AdjustmentsManagementController.updateAdjustmentsComment(applicationId: String)
GET         /adjustments/comment/:applicationId                          controllers.AdjustmentsManagementController.findAdjustmentsComment(applicationId: String)
DELETE      /adjustments/comment/:applicationId                          controllers.AdjustmentsManagementController.removeAdjustmentsComment(applicationId: String)

PUT         /media/create                                                controllers.MediaController.addMedia()

GET         /scheme-locations/eligible                                   controllers.LocationSchemeController.getEligibleSchemeLocations(applicationId: String, latitude: Option[Double] ?= None, longitude: Option[Double] ?= None)
GET         /scheme-locations/:applicationId                             controllers.LocationSchemeController.getSchemeLocations(applicationId: String)
PUT         /scheme-locations/:applicationId                             controllers.LocationSchemeController.updateSchemeLocations(applicationId: String)
DELETE      /scheme-locations/remove/:applicationId                      controllers.LocationSchemeController.removeSchemeLocations(applicationId: String)

GET         /schemes/available                                           controllers.LocationSchemeController.getAvailableSchemes
GET         /schemes/:applicationId                                      controllers.LocationSchemeController.getSchemes(applicationId: String)
PUT         /schemes/:applicationId                                      controllers.LocationSchemeController.updateSchemes(applicationId: String)
GET         /schemes/eligible/:applicationId                             controllers.LocationSchemeController.getEligibleSchemes(applicationId: String)
DELETE      /schemes/remove/:applicationId                               controllers.LocationSchemeController.removeSchemes(applicationId: String)

PUT         /pass-mark-settings/create                                   controllers.OnlineTestPassMarkSettingsController.createPassMarkSettings
GET         /pass-mark-settings/getLatestVersion                         controllers.OnlineTestPassMarkSettingsController.getLatestVersion

GET         /assessment-centre/pass-mark-settings                        controllers.AssessmentCentrePassMarkSettingsController.getLatestVersion
PUT         /assessment-centre/pass-mark-settings                        controllers.AssessmentCentrePassMarkSettingsController.create

GET         /assessment-schedule                                         controllers.AssessmentScheduleController.getAssessmentSchedule
GET         /assessment-schedule/venue/:venue/date/:date                 controllers.AssessmentScheduleController.getVenueDayCandidateSchedule(venue: String, date: String)
GET         /assessment-schedule/details/venue/:venue/date/:date         controllers.AssessmentScheduleController.getVenueDayCandidateScheduleWithDetails(venue: String, date: String)
GET         /assessment-schedule/application/:applicationId              controllers.AssessmentScheduleController.getApplicationAssessment(applicationId: String)
DELETE      /assessment-schedule/application/:applicationId              controllers.AssessmentScheduleController.deleteApplicationAssessment(applicationId: String)
GET         /assessment-schedule/centre-location/location/:locationName  controllers.AssessmentScheduleController.locationToAssessmentCentreLocation(locationName: String)
GET         /assessment-schedule/location/:location                      controllers.AssessmentScheduleController.getApplicationForAssessmentAllocation(location: String, start: Int, end: Int)
GET         /assessment-centres                                          controllers.AssessmentScheduleController.assessmentCentres
GET         /assessment-centre-capacities/venue/:venue                   controllers.AssessmentScheduleController.getAssessmentCentreCapacities(venue: String)
GET         /assessment-centre-allocation/venue/:venue                   controllers.AssessmentScheduleController.getAllocationsForVenue(venue: String)
POST        /assessment-centre-allocation                                controllers.AssessmentScheduleController.allocate

GET         /allocation-status/:applicationId                            controllers.AssessmentScheduleController.allocationStatus(applicationId)
POST        /allocation-status/confirm/:applicationId                    controllers.AssessmentScheduleController.confirmAllocation(applicationId)

PUT         /questionnaire/:applicationId/:sectionKey                    controllers.QuestionnaireController.addSection(applicationId: String,sectionKey: String)

GET         /search/find-by-id/user/:userId/framework/:frameworkId       controllers.SearchForApplicantsController.findById(userId: String, frameworkId: String)
POST        /search/find-by-criteria                                     controllers.SearchForApplicantsController.findByCriteria

GET         /report/diversity-monitoring/:frameworkId                    controllers.ReportingController.createDiversityReport(frameworkId: String)
GET         /report/application-user-ids/:frameworkId                    controllers.ReportingController.createApplicationAndUserIdsReport(frameworkId: String)
GET         /report/adjustments/:frameworkId                             controllers.ReportingController.createAdjustmentReports(frameworkId: String)
GET         /report/assessment-centre-allocation/:frameworkId            controllers.ReportingController.createAssessmentCentreAllocationReport(frameworkId: String)
GET         /report/candidate-progress/:frameworkId                      controllers.ReportingController.createCandidateProgressReport(frameworkId: String)
GET         /report/pass-mark-modelling/:frameworkId                     controllers.ReportingController.createOnlineTestPassMarkModellingReport(frameworkId: String)
GET         /report/pass-mark-personal-data/:frameworkId                 controllers.ReportingController.createOnlineTestPassMarkWithPersonalDataReport(frameworkId: String)
GET         /report/preferences-and-contact/:frameworkId                 controllers.ReportingController.createPreferencesAndContactReports(frameworkId: String)
GET         /report/successful-candidates/:frameworkId                   controllers.ReportingController.createSuccessfulCandidatesReport(frameworkId: String)
GET         /report/candidates-details/previous-year                     controllers.ReportingController.prevYearCandidatesDetailsReport
GET         /report/candidates-details-stream/previous-year              controllers.ReportingController.streamPrevYearCandidatesDetailsReport

GET         /diagnostic/user/:applicationId                              controllers.DiagnosticReportController.getApplicationByApplicationId(applicationId: String)
GET         /diagnostic/all-users                                        controllers.DiagnosticReportController.getAllApplications

GET         /online-test/candidate/:userId                               controllers.OnlineTestController.getOnlineTest(userId: String)
POST        /online-test/candidate/:userId/status                        controllers.OnlineTestController.onlineTestStatusUpdate(userId: String)
PUT         /online-test/:cubiksUserId/start                             controllers.OnlineTestController.startOnlineTest(cubiksUserId: Int)
PUT         /online-test/:cubiksUserId/complete/:assessmentId            controllers.OnlineTestController.completeOnlineTest(cubiksUserId: Int, assessmentId: Int)
PUT         /online-test/:cubiksUserId/results-ready                     controllers.OnlineTestController.tryToDownloadOnlineTestReport(cubiksUserId: Int)
PUT         /online-test/by-token/:token/complete                        controllers.OnlineTestController.completeOnlineTestByToken(token: String)
POST        /online-test/reset/:appId                                    controllers.OnlineTestController.resetOnlineTests(appId: String)
POST        /online-test/extend/:appId                                   controllers.OnlineTestController.extendOnlineTests(appId: String)
GET         /online-test/pdf-report/:applicationId                       controllers.OnlineTestController.getPDFReport(applicationId: String)

GET         /test-scores/application/:applicationId                      controllers.CandidateScoresController.getCandidateScores(applicationId: String)
PUT         /test-scores/application/:applicationId                      controllers.CandidateScoresController.createCandidateScoresAndFeedback(applicationId: String)
PUT         /test-scores/accept/application/:applicationId               controllers.CandidateScoresController.acceptCandidateScoresAndFeedback(applicationId: String)

GET         /application/:applicationId/issue                            controllers.FlagCandidateController.find(applicationId: String)
PUT         /application/:applicationId/issue                            controllers.FlagCandidateController.save(applicationId: String)
DELETE      /application/:applicationId/issue                            controllers.FlagCandidateController.remove(applicationId: String)

GET         /schools                                                     controllers.SchoolsController.getSchools(term: String)
